/**
 * DO NOT EDIT THIS FILE!
 *
 */


/**
 * Sets a mobile-first media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String||Number} if number is converted to px
 *
 * Usage:
 * .selector {
 *   @include mq(992px|1280|$breakpoint-small) {
 *     color: red;
 *   }
 * }
 */
@mixin mq($value) {
  @if (type-of($value) != number) {
    @error "Sorry, but `#{$value}` is not a valid argument for the mq() mixin.";
  } @else if (unitless($value)) {
    $value: $value + "px";
  }
  @media only screen and (min-width: $value) {
    @content;
  }
}

/**
 * Sets a desktop-first media query for the specified breakpoint using `max-width`
 *
 * Accepts:
 * - $media-query: {String||Number}
 *
 * Usage:
 * .selector {
 *   @include mq-max(992px|1280|$breakpoint-small) {
 *     color: red;
 *   }
 * }
 */
@mixin mq-max($value) {
  @if (type-of($value) != number) {
    @error "Sorry, but `#{$value}` is not a valid argument for the mq() mixin.";
  } @else if (unitless($value)) {
    $value: $value + "px";
  }
  @media only screen and (max-width: $value) {
    @content;
  }
}


/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 * .selector {
 *   @include visually-hidden;
 * }
 */
@mixin visually-hidden() {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}

/**
 * Reverse the properties applied by @mixin visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 * .selector {
 *   @include visually-shown(relative);
 * }
 */
@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}
